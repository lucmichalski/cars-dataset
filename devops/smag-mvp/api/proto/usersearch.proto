syntax = "proto3";

package proto;

message User {
    string id = 1;
    string user_name = 2;
    string real_name = 3;
    string bio = 4;
    string avatar_url = 5;
    repeated User followings = 6;
    repeated User followers = 7;
}

message UserSearchResponse {
    repeated User user_list = 1;
}

message UserNameRequest {
    string user_name = 1;
}

message UserIdRequest {
    string user_id = 1;
}

message InstaPost {
    string id = 1;
    string post_id = 2;
    string img_url = 3;
    string caption = 4;
    repeated User tagged_users = 5;
    string short_code = 6;

}

message InstaPostsResponse {
    string user_id = 1;
    repeated InstaPost insta_posts = 2;
}

message FaceSearchRequest {
    string base64EncodedPicture = 1;
}

message Face {
    int32 x = 1;
    int32 y = 2;
    int32 width = 3;
    int32 height = 4;
    int32 post_id = 5;
    string full_image_src = 6;
}

message FaceSearchResponse {
    repeated Face faces = 1;
}

message WeightedPostWithFaces {
    int32 post_id = 1;
    int32 weight = 2;
    repeated Face faces = 3;
}

message WeightedPosts{
    repeated WeightedPostWithFaces posts = 1;
}

message UserWithFaces {
    User user = 1;
    repeated Face faces = 2;
    int32 weight = 3;
}

message WeightedUsers {
    repeated UserWithFaces users_with_faces = 1;
}

message UserDataPointCount {
    int32 count = 1;
}

message FoundCities {
    repeated string city_names = 1;
}

service UserSearchService {
    rpc GetAllUsersLikeUsername(UserNameRequest) returns (UserSearchResponse);
    rpc GetUserWithUserId(UserIdRequest) returns (User);
    rpc GetUserWithUsername(UserNameRequest) returns (User);
    rpc GetInstaPostsWithUserId(UserIdRequest) returns (InstaPostsResponse);
    rpc SearchSimilarFaces(FaceSearchRequest) returns(FaceSearchResponse);
    rpc SearchUsersWithWeightedPosts(WeightedPosts) returns (WeightedUsers);
    rpc DataPointCountForUserId(UserIdRequest) returns (UserDataPointCount);
    rpc FindCitiesForUserId(UserIdRequest) returns (FoundCities);
}
