---
version: '3.7'
services:

  crawler:
    image: lucmichalski/car-crawler:latest
    container_name: ${NAMESPACE}-crawler  
    build: .
    ports:
    - 9000:9000
    networks:
    - internal
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_HOST: ${MYSQL_HOST}
    volumes:
    - ./dataset:/opt/lucmichalski/bin/datasets
    - ./tmp:/tmp
    - cache-data:/opt/lucmichalski/bin/data
    - public-data:/opt/lucmichalski/bin/public
    restart: unless-stopped
    depends_on:
    - mysql
    links:
    - mysql:mysql
    command: ["cars-dataset", "--parallel-jobs", "1"]

  crawler-mtbauto:
    image: lucmichalski/car-crawler--mtbauto:latest
    container_name: ${NAMESPACE}-crawler
    build: .
    networks:
    - internal
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_HOST: ${MYSQL_HOST}
    volumes:
    - ./dataset:/opt/lucmichalski/bin/datasets
    - ./tmp:/tmp
    - cache-data:/opt/lucmichalski/bin/data
    - public-data:/opt/lucmichalski/bin/public
    restart: unless-stopped
    depends_on:
    - mysql
    links:
    - mysql:mysql
    command: ["cars-dataset", "--plugins", "motorcycles.autotrader.com", "--extract", "--no-cache"]

  dataset:
    image: lucmichalski/car-admin:latest
    container_name: ${NAMESPACE}-dataset
    build: .
    networks:
    - internal
    - web
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_HOST: ${MYSQL_HOST}
    restart: unless-stopped
    volumes:
    - ./public:/opt/lucmichalski/bin/public
    - ./templates:/opt/lucmichalski/bin/templates
    - ./shared/datatset:/opt/lucmichalski/bin/dataset
    depends_on:
    - mysql
    links:
    - mysql:mysql
    command: ["cars-dataset", "--dataset"]

  admin:
    image: lucmichalski/car-admin:latest
    container_name: ${NAMESPACE}-admin  
    build: .
    ports:
    - 9008:9008
    networks:
    - internal
    - web
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_HOST: ${MYSQL_HOST}
    restart: unless-stopped
    volumes:
    - ./public:/opt/lucmichalski/bin/public
    - ./templates:/opt/lucmichalski/bin/templates
    depends_on:
    - mysql
    links:
    - mysql:mysql
    command: ["cars-dataset", "--admin"]

  selenium:
    image: selenium/standalone-chrome:latest
    ports:
    - 4444:4444
    volumes:
    - /dev/shm:/dev/shm
    networks:
    - internal
    - web
    restart: unless-stopped

  mysql:
    image: mysql:5.7
    container_name: ${NAMESPACE}-db
    ports:
    - 13306:3306
    volumes:
    - db-data:/var/lib/mysql
    networks:
    - internal
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
    restart: unless-stopped

  backup:
    image: zeenlym/mariadb-backup
    container_name: ${NAMESPACE}_backup
    depends_on:
    - mysql
    restart: unless-stopped
    networks:
    - internal
    environment:
    - TIMEZONE=${TIME_ZONE}
    - SCHEDULE=0 0 0 3 *
    - BACKUP_METHOD=mysqldump
    - MYSQL_HOST=mysql
    - MYSQL_DATABASE=${MYSQL_DATABASE}
    - MYSQL_USER=${MYSQL_USER}
    - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
    - ${MYSQL_BACKUP_DIR}:/backup
    restart: unless-stopped

  imaginary:
    image: h2non/imaginary:latest
    container_name: ${NAMESPACE}_imaginary
    volumes:
    - imaginary-data:/mnt/data
    environment:
       PORT: 9002
    ports:
    - "9002:9002"
    networks:
    - internal
    command: -cors -gzip -enable-url-source -mount /mnt/data
    restart: unless-stopped

  sidekiq: &darknet_base
    build:
      context: .docker/darknet
      dockerfile: Dockerfile.gpu
    image: go-darknet:gpu-latest
    working_dir: /darknet
    volumes:
    - ./darknet:/darknet
    - darknet-data:/darknet/models
    command: ./scripts/download_data.sh

  darknet-test:
    <<: *darknet_base
    ports:
    - "9006:9006"
    environment:
       DARKNET_PORT: 9006
    # command: ["/bin/bash"]
    # command: go run server.go --configFile=models/common_inference.cfg --weightsFile=models/common_220000.weights
    command: go run server.go --configFile=models/yolov3.cfg --weightsFile=models/yolov3.weights
    networks:
    - internal
    - web # for tests purpose
    restart: unless-stopped

  darknet:
    <<: *darknet_base
    ports:
    - "9003:9003"
    environment:
       DARKNET_PORT: 9003
    # command: ["/bin/bash"]
    # command: go run server.go --configFile=models/common_inference.cfg --weightsFile=models/common_220000.weights
    command: go run server.go --configFile=models/yolov3.cfg --weightsFile=models/yolov3.weights
    networks:
    - internal
    - web # for tests purpose    
    restart: unless-stopped

  darknet2:
    <<: *darknet_base
    ports:
    - "9004:9004"
    environment:
       DARKNET_PORT: 9004
    # command: ["/bin/bash"]
    # command: go run server.go --configFile=models/common_inference.cfg --weightsFile=models/common_220000.weights
    command: go run server.go --configFile=models/yolov3.cfg --weightsFile=models/yolov3.weights
    networks:
    - internal
    - web # for tests purpose
    restart: unless-stopped

  darknet3:
    <<: *darknet_base
    ports:
    - "9005:9005"
    environment:
       DARKNET_PORT: 9005
    # command: ["/bin/bash"]
    # command: go run server.go --configFile=models/common_inference.cfg --weightsFile=models/common_220000.weights
    command: go run server.go --configFile=models/yolov3.cfg --weightsFile=models/yolov3.weights
    networks:
    - internal
    - web # for tests purpose
    restart: unless-stopped

  gocv:
    image: lucmichalski/gocv:alpine-cpu-latest
    build:
      context: .docker/gocv-alpine
      dockerfile: Dockerfile
    container_name: ${NAMESPACE}-gocv
    ports:
    - 8099:8099
    networks:
    - internal
    - web # for tests purpose
    restart: unless-stopped

  find-object:
    image: lucmichalski/find-object:alpine-cpu-latest
    build:
      context: .docker/find-object
      dockerfile: Dockerfile
    container_name: ${NAMESPACE}-findobj
    ports:
    - 8100:8100
    networks:
    - internal
    - web # for tests purpose
    restart: unless-stopped
    # command [""]

networks:
  internal:
  web:
    external: true

volumes:
  db-data:
  cache-data:
  imaginary-data:
  darknet-data:
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/models
  public-data:
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/public
