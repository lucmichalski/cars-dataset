---
version: '3.7'
services:

  darknet-train:
    image: lucmichalski/darknet-train:latest
    container_name: ${NAMESPACE}-darknet-train
    build:
      context: .docker/darknet
      dockerfile: Dockerfile.dev    
    networks:
    - internal    
    volumes:
    - ./tools:/opt/tools
    - ./shared/datasets:/opt/data
    - ./models:/opt/models
    command: ["/bin/bash"]

  yolact-sidekiq: &yolact_base
    build:
      context: .docker/yolact-mini
      dockerfile: Dockerfile.gpu
    image: yolact-minimal:gpu-latest
    working_dir: /yolact
    volumes:
    - ./.docker/yolact-mini/server:/yolact/server
    - yolact-models:/yolact/weights
    - yolact-results:/yolact/results
    command: ./scripts/download_data.sh

  yolact-mini:
    <<: *yolact_base
    ports:
    - "8000:8000"
    networks:
    - internal
    - web

  tensorflow:
    image: tensorflow/tensorflow:latest-gpu-py3
    command: ["bash"]

  kaggle:
    image: lucmichalski/kaggle:py3-alpine3.11
    container_name: ${NAMESPACE}-kaggle
    build:
      context: .docker/kaggle
      dockerfile: Dockerfile
    networks:
    - internal
    volumes:
    - ./shared/datasets/kaggle:/opt/kaggle
    command: ["/bin/bash"]

  sandbox:
    image: alpine:3.11
    container_name: ${NAMESPACE}-sandbox
    build:
      context: .docker/sandbox
      dockerfile: Dockerfile
    networks:
    - internal
    depends_on:
    - protonvpn
    - tor-haproxy
    links:
    - protonvpn:protonvpn
    - tor-haproxy:tor-haproxy
    command: ["/bin/bash"]

  #jupyter:
  #  image: lucmichalski/jupyter-notebook:latest-alpine3.11
  #  build:
  #    context: .docker/jupyter-notebook
  #    dockerfile: Dockerfile
  #  container_name: ${NAMESPACE}-jupyter
  #  networks:
  #  - internal
  #  - web
  #  ports:
  #  - 8888:8888
  #  command: ["jupyter", "notebook", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root"]    

  dataset:
    image: lucmichalski/car-admin:latest
    container_name: ${NAMESPACE}-dataset
    build:
      context: .
      dockerfile: Dockerfile
    networks:
    - internal
    - web
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_HOST: ${MYSQL_HOST}
    restart: unless-stopped
    volumes:
    - ./shared/geoip2/:/opt/lucmichalski/bin/shared/geoip2/
    - ./public:/opt/lucmichalski/bin/public
    - ./templates:/opt/lucmichalski/bin/templates
    - ./shared/datatset:/opt/lucmichalski/bin/dataset
    depends_on:
    - mysql
    - selenium
    - tor-haproxy
    links:
    - mysql:mysql
    command: ["cars-dataset", "--dataset"]

  admin:
    image: lucmichalski/car-admin:latest
    container_name: ${NAMESPACE}-admin  
    build:
      context: .
      dockerfile: Dockerfile
    ports:
    - 9008:9008
    networks:
    - internal
    - web
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_HOST: ${MYSQL_HOST}
    restart: unless-stopped
    volumes:
    - ./shared/geoip2/:/opt/lucmichalski/bin/shared/geoip2/
    - ./public:/opt/lucmichalski/bin/public
    - ./templates:/opt/lucmichalski/bin/templates
    depends_on:
    - mysql
    links:
    - mysql:mysql
    command: ["cars-dataset", "--admin"]

  selenium:
    image: selenium/standalone-chrome:latest
    container_name: ${NAMESPACE}-selenium
    ports:
    - 4444:4444
    volumes:
    - /dev/shm:/dev/shm
    networks:
    - internal
    - web
    restart: unless-stopped

  tor-haproxy:
    restart: always
    container_name: ${NAMESPACE}-tor-haproxy
    image: lucmichalski/tor-haproxy:latest       
    build:
      context: .docker/tor-haproxy
      dockerfile: Dockerfile
    environment:
    - privoxy=1
    - privoxy_port=8119
    - tors=25
    networks:
    - internal
    - web
    ports:
    - 5566:5566
    - 2090:2090
    - 8119:8119

  #tor-privoxy:
  #  restart: always
  #  container_name: ${NAMESPACE}-tor-privoxy
  #  image: dockage/tor-privoxy:latest
  #  networks:
  #  - internal
  #  - web
  #  ports:
  #  - "9050:9050" # Tor proxy
  #  - "9051:9051" # Tor control port
  #  - "8118:8118" # Privoxy

  protonvpn:
    image: protonvpn-docker
    container_name: ${NAMESPACE}-protonvpn
    build:
      context: .docker/protonvpn
      dockerfile: Dockerfile
      args:
      - PROTONVPN_USER=${PROTONVPN_USER}
      - PROTONVPN_PASSWORD=${PROTONVPN_PASSWORD} 
    stdin_open: true
    tty: true
    environment:
    - SOCKD_WORKERS=10
    # volumes:
    # - ./shared/logs/protovpn/pvpn-cli.log:/root/.pvpn-cli/pvpn-cli.log
    # - ./shared/logs/protovpn/ovpn.log:/root/.pvpn-cli/ovpn.log
    ports:
    - "1080:1080"
    cap_add:
    - NET_ADMIN
    devices:
    - "/dev/net/tun:/dev/net/tun"
    command: >
      sh -c "protonvpn connect --cc US &&
      sockd -N $$SOCKD_WORKERS"
    networks:
    - internal
    - web
    #volumes:
    #- "./sockd.conf:/etc/sockd.conf"

  mysql:
    image: mysql:5.7
    container_name: ${NAMESPACE}-db
    ports:
    - 3306:3306
    volumes:
    - db-data:/var/lib/mysql
    networks:
    - internal
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
    restart: unless-stopped

  backup:
    image: zeenlym/mariadb-backup
    container_name: ${NAMESPACE}-backup
    depends_on:
    - mysql
    restart: unless-stopped
    networks:
    - internal
    environment:
    - TIMEZONE=${TIME_ZONE}
    - SCHEDULE=0 0 0 3 *
    - BACKUP_METHOD=mysqldump
    - MYSQL_HOST=mysql
    - MYSQL_DATABASE=${MYSQL_DATABASE}
    - MYSQL_USER=${MYSQL_USER}
    - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
    - ./backup:/backup
    restart: unless-stopped

  imaginary:
    image: h2non/imaginary:latest
    container_name: ${NAMESPACE}-imaginary
    volumes:
    - imaginary-data:/mnt/data
    environment:
       PORT: 9002
    ports:
    - "9002:9002"
    networks:
    - internal
    command: -cors -gzip -enable-url-source -mount /mnt/data
    restart: unless-stopped

  sidekiq: &darknet_base
    build:
      context: .docker/darknet
      dockerfile: Dockerfile.gpu
    image: go-darknet:gpu-latest
    working_dir: /darknet
    volumes:
    - ./darknet:/darknet
    - darknet-data:/darknet/models
    command: ./scripts/download_data.sh

  darknet-test:
    <<: *darknet_base
    container_name: ${NAMESPACE}-darknetdev
    ports:
    - "9006:9006"
    environment:
       DARKNET_PORT: 9006
    command: go run server.go --configFile=models/yolov4.cfg --weightsFile=models/yolov4.weights
    networks:
    - internal
    - web # for tests purpose
    restart: unless-stopped
  
  darknet:
    <<: *darknet_base
    ports:
    - "9003:9003"
    container_name: ${NAMESPACE}-darknet1
    environment:
       DARKNET_PORT: 9003
       NVIDIA_VISIBLE_DEVICES: all
    command: go run server.go --configFile=models/yolov4.cfg --weightsFile=models/yolov4.weights
    networks:
    - internal
    - web # for tests purpose    
    # restart: unless-stopped

  darknet2:
    <<: *darknet_base
    container_name: ${NAMESPACE}-darknet2
    ports:
    - "9004:9004"
    environment:
       DARKNET_PORT: 9004
    command: go run server.go --configFile=models/yolov4.cfg --weightsFile=models/yolov4.weights
    networks:
    - internal
    - web # for tests purpose
    # restart: unless-stopped

  darknet3:
    <<: *darknet_base
    container_name: ${NAMESPACE}-darknet3
    ports:
    - "9005:9005"
    environment:
       DARKNET_PORT: 9005
    command: go run server.go --configFile=models/yolov4.cfg --weightsFile=models/yolov4.weights
    networks:
    - internal
    - web # for tests purpose
    # restart: unless-stopped

  gocv:
    image: lucmichalski/gocv:alpine-cpu-latest
    build:
      context: .docker/gocv-alpine
      dockerfile: Dockerfile
    container_name: ${NAMESPACE}-gocv
    ports:
    - 8099:8099
    networks:
    - internal
    - web # for tests purpose
    restart: unless-stopped

  find-object:
    image: lucmichalski/find-object:alpine-cpu-latest
    build:
      context: .docker/find-object
      dockerfile: Dockerfile
    container_name: ${NAMESPACE}-findobj
    ports:
    - 8100:8100
    networks:
    - internal
    - web # for tests purpose
    restart: unless-stopped
    # command [""]

  dozzle:
    container_name: ${NAMESPACE}-dozzle
    image: amir20/dozzle:latest
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    ports:
    - 9999:9999
    command: ["--addr", "0.0.0.0:9999"]
    networks:
    - web # for tests purpose
    restart: unless-stopped  

  deeepdetect:
    image: jolibrain/deepdetect_cpu
    ports:
    - 5003:5003
    networks:
    - internal
    - web # for tests purpose
    restart: unless-stopped
    command: ["./dede", "-port", "5003", "-host", "0.0.0.0"]

networks:
  internal:
  web:
    external: true

volumes:
  db-data:
  cache-data:
  imaginary-data:
  deepdetect-data:
  darknet-data:
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/models
  public-data:
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/public
  yolact-models:
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/models/yolact/weights
  yolact-results:
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/shared/yolact/results
